'''
there are quite a few --EMPTY-- or --empty-- and a bunch of other unnecessary stuff in the utterances. might want to remove them 
'''
import re
import json
import os
import argparse

parser = argparse.ArgumentParser(description='arguments')

parser.add_argument('--data-path',type=str,default='',help='path to the directory that stores all.txt generated by the shell script')




def remove(path):
    #remove --EMPTY-- / --empty--
    with open(os.path.join(path,'all.txt'),'r') as f:
    #with open('/home/liuc0062/Malay_dataset/all.txt','r') as f:
        lines = f.readlines()
    
    dic = {}
    with open(os.path.join(path,'cleaned_all.txt'),'w') as f:
    #with open("/home/liuc0062/Malay_dataset/cleaned_all.txt", "w") as f:
        for line in lines:
            # if '~' in line:
            #     if line.split(' ')[0][:-14] not in dic.keys():
            #         dic[line.split(' ')[0][:-14]] = [line]
            #     else: dic[line.split(' ')[0][:-14]].append(line)
            #remove hashtag
            line1 = re.sub(r'#(.*)#', r'\1', line)
            #remove <unk>
            line2 = re.sub(r'.unk>\s*', '', line1)
            #remove (pp*)
            line3 = re.sub(r'\(pp.\)\s*', '', line2)
            #remove []
            line4 = re.sub(r'\[([a-zA-Z\s]*)\]', r'\1', line3)
            #remove ()
            line5 = re.sub(r'\(([a-zA-Z\s]*)\)', r'\1', line4)
            #remove _
            line6 = re.sub(r'(.)_', r'\1', line5)
            #remove ~
            line7 = re.sub(r'~', '', line6)
            #remove zero-width no-break space
            line8 = re.sub(r'ï»¿', '', line7)
            
            if '--EMPTY' not in line8 and '--empty' not in line8 and len(line8.strip().split(' ')) > 3:
            #if '--EMPTY' not in line8 and '--empty' not in line8 and line8.strip()!='':
                if '\n' not in line8:
                    line8 = line8+'\n'
                f.write(line8)

    #with open("./preprocess/dataset/SUD_with_wave_for_incomplete.json", "w") as outfile: 
        #json.dump(dic, outfile, ensure_ascii=False)




if __name__ == '__main__':
    args = parser.parse_args()
    path = args.data_path
    remove(path)


# "<unk> abc <c/> (ppl) def (ppo) <c/> [lor] ghi (uh) jkl <c/> n_t_u <c/> #bukit-timah# <s/>"